#+TITLE: config
#+TODO: ADDME FIXME TWEAKME | ADDED FIXED TWEAKED

* Startup
#+BEGIN_SRC emacs-lisp
(package-initialize)
(add-to-list 'load-path "~/.emacs.d/lisp/")
#+END_SRC

* Sane Defaults
#+BEGIN_SRC emacs-lisp
(require 'uniquify)
(setq uniquify-buffer-name-style 'forward)


(setq-default tab-width 4)
(setq c-basic-offset 4)
(save-place-mode 1)

(setq mac-command-modifier 'super mac-option-modifier 'meta)
(setq mac-control-modifier 'control)

(setq backup-directory-alist
      `((".*" . ,temporary-file-directory)))
(setq auto-save-file-name-transforms
      `((".*" ,temporary-file-directory t)))
(require 'package)

(defun package-fixer ()
  (interactive)
  (setq package-archives '(("ELPA" . "http://tromey.com/elpa/")
                           ("gnu" . "http://elpa.gnu.org/packages/")))

  (add-to-list 'package-archives
               '("melpa" . "https://melpa.org/packages/") t)

  (package-initialize)
  (setq url-http-attempt-keepalives nil)
  (setq package-check-signature nil))   ;
(package-fixer)
#+END_SRC

* General Aesthetics

** Undoing Defaults
First, let's remove all of the grosser parts of default Emacs.

#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil)
  (setq pop-up-windows nil)
  (tool-bar-mode 0)
  (tooltip-mode  0)
  (scroll-bar-mode 0)
  (blink-cursor-mode 0)
  (global-auto-revert-mode t)
  (setq visible-bell t)
  (menu-bar-mode 0)
  (setq ring-bell-function 'ignore)
  (setq widget-image-enable nil)
  (fringe-mode '(0 . 0))

  (set-face-attribute 'secondary-selection nil
                      :background nil)
#+END_SRC

** Theming
*** Doom
#+BEGIN_SRC emacs-lisp
  (use-package doom-themes
    :config
    ;; Global settings (defaults)
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
          doom-themes-enable-italic t) ; if nil, italics is universally disabled
    (load-theme 'ewal-doom-one t)

    ;; Enable flashing mode-line on errors
    (doom-themes-visual-bell-config)

    ;; Enable custom neotree theme (all-the-icons must be installed!)
    (doom-themes-neotree-config)
    ;; or for treemacs users
    (setq doom-themes-treemacs-theme "doom-colors") ; use the colorful treemacs theme
    (doom-themes-treemacs-config)

    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config))

  (setq neo-window-width 35)
  (setq doom-modeline-height 40)
  (doom-modeline-mode)
  (setq centaur-tabs-height 16)
  (setq centaur-tabs-style "bar")
  (setq centaur-tabs-set-icons t)
  (setq centaur-tabs-set-bar 'left)
  (setq x-underline-at-descent-line t)
  (centaur-tabs-mode)

  (solaire-global-mode)
#+END_SRC

*** ADDME Elegant Emacs
Font:
#+BEGIN_SRC emacs-lisp
  ;; Default font and frame size
  (set-face-font 'default "Roboto Mono Light 12")
  (setq default-frame-alist
        (append (list '(width  . 72) '(height . 40)
                      '(vertical-scroll-bars . nil)
                      '(internal-border-width . 24)
                      '(font . "Roboto Mono Light 12"))))
  (set-frame-parameter (selected-frame)
                       'internal-border-width 24)
#+END_SRC

#+END_SRC
** Tweaks

#+BEGIN_SRC emacs-lisp
  (set-default 'cursor-type  '(bar . 1))
  (setq-default line-spacing 0)
  (global-visual-line-mode 1)
  (set-face-attribute 'variable-pitch nil
                      :family "Google Sans")
#+END_SRC

** Lively
#+BEGIN_SRC emacs-lisp
(defun lively-update-overlay (o)
  "Evaluate the lively code for O and update its display text."
  (with-current-buffer (overlay-buffer o)
    (let ((expr (buffer-substring (overlay-start o) (overlay-end o))))
      (overlay-put o 'display (format "%s" (eval (read expr)))))))

(defun lively-init-timer ()
  "Setup background timer to update lively text."
  (setq lively-timer (run-with-timer 0 lively-interval 'lively-update)))

(defun lively-stop ()
  "Remove all lively regions in Emacs."
  (interactive)
  (when lively-timer (cancel-timer lively-timer))
  (setq lively-timer nil)
  (mapc 'delete-overlay lively-overlays)
  (setq lively-overlays nil))

;;; Nice to have:

(defun lively-shell-command (command)
  "Execute COMMAND and return the output, sans trailing newline."
  (let ((result (shell-command-to-string command)))
    (substring result 0 (1- (length result)))))
#+END_SRC

* General Functionality

** Bindings
Unbind what I don't like, then add some custom binds.
#+BEGIN_SRC emacs-lisp
;; Unbind unneeded keys
(global-set-key (kbd "M-z") nil)
(global-set-key (kbd "M-/") nil)
;; Adjust font size like web browsers
(global-set-key (kbd "C-=") #'text-scale-increase)
(global-set-key (kbd "C-+") #'text-scale-increase)
(global-set-key (kbd "C--") #'text-scale-decrease)

(defun custom/kill-this-buffer ()
  (interactive) (kill-buffer (current-buffer)))
(global-set-key (kbd "C-x k") 'custom/kill-this-buffer)

(global-set-key (kbd "C-y") 'yank)

(global-set-key (kbd "C-z") 'undo)
(global-set-key (kbd "C-x C-x") 'execute-extended-command)
(global-set-key (kbd "C-c C-l") #'evaluate-buffer)

(global-set-key "\C-t" #'transpose-lines)
(define-key ctl-x-map "\C-t" #'transpose-chars)

;; Sort of a HACK to make ivy keybinds work
(define-key global-map (kbd "C-z") (make-sparse-keymap))
#+END_SRC

Then some package-specific stuff.

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-?") 'beacon-blink)

(load "external/transpose-frame.el")
;; FIXME: Tranpose frame does not actually work. Fix sometime.
(global-set-key (kbd "C-x C-z") 'tranpose-frame)
#+END_SRC
** CRUX
#+BEGIN_SRC emacs-lisp
(use-package crux
  :bind
  (("C-a" . crux-move-beginning-of-line) ;; Move to beginning of text, not line.
   ("C-x 4 t" . crux-transpose-windows)
   ("C-x K" . crux-kill-other-buffers)
   ("C-k" . crux-smart-kill-line))
  :config
  (crux-with-region-or-buffer indent-region)
  (crux-with-region-or-buffer untabify)
  (crux-with-region-or-point-to-eol kill-ring-save)
  (defalias 'rename-file-and-buffer #'crux-rename-file-and-buffer))
#+END_SRC

** Ivy

#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :diminish
    :init
    (use-package amx :defer t)
    (use-package counsel :diminish :config (counsel-mode 1))
    (use-package swiper :defer t)
    (ivy-mode 1)
    :bind
    (("C-s"     . swiper-isearch)
     ;("C-z s"   . counsel-rg)
     ;("C-z b"   . counsel-buffer-or-recentf)
     ;("C-z C-b" . counsel-ibuffer)
     ("M-x"     . counsel-M-x)
     ("C-x C-f" . counsel-find-file)
     ("<f1> f"  . counsel-describe-function)
     ("<f1> v"  . counsel-describe-variable)
     ("<f1> o"  . counsel-describe-symbol)
     ("<f1> l"  . counsel-find-library)
     ("<f2> i"  . counsel-info-lookup-symbol)
     ("<f2> u"  . counsel-unicode-char)
     ("C-c g"   . counsel-git)
     ("C-c o"   . ivy-omni-org)
     ("C-c j"   . counsel-git-grep)
     ("C-c k"   . counsel-ag)
     ("C-x l"   . counsel-locate)
     ("C-s-o"   . counsel-rhythmbox)
     (:map ivy-minibuffer-map
           ("C-r" . ivy-previous-line-or-history)
           ("M-RET" . ivy-immediate-done))
     (:map counsel-find-file-map
           ("C-~" . counsel-goto-local-home)))
    :custom
    (ivy-use-virtual-buffers t)
    (ivy-height 10)
    (ivy-on-del-error-function nil)
    (ivy-magic-slash-non-match-action 'ivy-magic-slash-non-match-create)
    (ivy-count-format "[%d/%d] ")
    (ivy-wrap t)
    :config
    (defun counsel-goto-local-home ()
        "Go to the $HOME of the local machine."
        (interactive)
      (ivy--cd "~/")))
#+END_SRC

** Yasnippet
 #+BEGIN_SRC emacs-lisp
 (yas-global-mode)
 #+END_SRC

* Org
** Aesthetics

*** Icons
#+BEGIN_SRC emacs-lisp
  ;; Prettify symbols mode is nice despite the fact I may be abusing it
  (add-hook 'org-mode-hook (lambda ()
     "Beautify Org Checkbox Symbol"
     (push '("TODO" . "") prettify-symbols-alist)
     (push '("DONE" . "" ) prettify-symbols-alist)
     (push '("WAIT" . "" ) prettify-symbols-alist)
     (push '("NOPE" . "" ) prettify-symbols-alist)
     (push '("[#A]" . ""  ) prettify-symbols-alist)
     (push '("[#B]" . ""  ) prettify-symbols-alist)
     (push '("[#C]" . "" ) prettify-symbols-alist)
     (push '("[ ]"  . "" ) prettify-symbols-alist)
     (push '("[X]"  . "" ) prettify-symbols-alist)
     (push '("[-]"  . "" ) prettify-symbols-alist)
     (push '("#+BEGIN_SRC" . "" ) prettify-symbols-alist)
     (push '("#+END_SRC" . "―" ) prettify-symbols-alist)
     (push '(":PROPERTIES:" . "" ) prettify-symbols-alist)
     (push '(":END:" . "―" ) prettify-symbols-alist)
     (push '("#+STARTUP:" . "" ) prettify-symbols-alist)
     (push '("#+TITLE: " . "" ) prettify-symbols-alist)
     (push '("#+RESULTS:" . "" ) prettify-symbols-alist)
     (push '("#+NAME:" . "" ) prettify-symbols-alist)
     (push '("#+ROAM_TAGS:" . "" ) prettify-symbols-alist)
     (push '("#+HTML_HEAD:" . "" ) prettify-symbols-alist)
     (push '("#+AUTHOR:" . "" ) prettify-symbols-alist)
     (push '("#+SUBTITLE:" . "" ) prettify-symbols-alist)
     (push '("SCHEDULED:" . "" ) prettify-symbols-alist)
     (push '("DEADLINE:" . "" ) prettify-symbols-alist)
     (push '("#+FILETAGS:" . "" ) prettify-symbols-alist)
     (prettify-symbols-mode)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(with-eval-after-load 'org
  (setq org-display-inline-images t)
  (setq org-redisplay-inline-images t)
  (setq org-startup-with-inline-images "inlineimages")
  (setq org-hide-emphasis-markers t)
  (setq org-confirm-elisp-link-function nil)
  (setq org-ellipsis "…")
  (setq org-link-frame-setup '((file . find-file))))
#+END_SRC

*** TWEAKME Faces
Misc variables to be set before config starts:
#+BEGIN_SRC emacs-lisp
(setq org-fontify-quote-and-verse-blocks t)
(setq org-fontify-done-headline t)
#+END_SRC

Change faces of todo states and priorities. While we're at it, fontify the text section of completed checlnoc
#+BEGIN_SRC emacs-lisp
  (setq org-priority-faces '((?A . (:foreground "#f5381b" :weight 'bold))
                            (?B . (:foreground "#f5cb22"))
                            (?C . (:foreground "#6cad50"))))

  (setq org-todo-keyword-faces
        '(("TODO" . "#999999") ("WAIT" . "#cfd1d1")
          ("DONE" . "#6cad50") ("NOPE" . "#cfd1d1")))

  (defface org-checkbox-done-text
    '((t (:foreground "#71696A" :strike-through t)))
    "Face for the text part of a checked org-mode checkbox.")

  (custom-set-faces
   '(org-headline-done
              ((((class color) (class color) (min-colors 16))
                (:foreground "#cfd1d1")))))
#+END_SRC

#+RESULTS:



#+BEGIN_SRC emacs-lisp
  (set-face-attribute 'org-hide nil
                        :foreground "brightblack"
                        :background nil)
      (with-eval-after-load 'org
      (set-face-attribute 'org-ellipsis nil
                          :foreground "#999999"
                          :underline nil
                          :weight 'light)
      (set-face-attribute 'org-special-keyword nil
                          :foreground "#999999"
                          :weight 'light)
      (set-face-attribute 'org-document-title nil
                          :height 2.0
                          :weight 'bold)
      (set-face-attribute 'org-checkbox-statistics-todo nil
                          :foreground "#f5381b"
                          :weight 'bold)
      (set-face-attribute 'org-checkbox-statistics-done nil
                          :foreground "#6cad50"
                          :weight 'bold))
#+END_SRC

#+RESULTS:

*** Misc

Use stackoverflow answer to hide properties drawers:
#+BEGIN_SRC emacs-lisp
(require 'org)

(defun org-cycle-hide-drawers (state)
  "Re-hide all drawers after a visibility state change."
  (when (and (derived-mode-p 'org-mode)
             (not (memq state '(overview folded contents))))
    (save-excursion
      (let* ((globalp (memq state '(contents all)))
             (beg (if globalp
                    (point-min)
                    (point)))
             (end (if globalp
                    (point-max)
                    (if (eq state 'children)
                      (save-excursion
                        (outline-next-heading)
                        (point))
                      (org-end-of-subtree t)))))
        (goto-char beg)
        (while (re-search-forward org-drawer-regexp end t)
          (save-excursion
            (beginning-of-line 1)
            (when (looking-at org-drawer-regexp)
              (let* ((start (1- (match-beginning 0)))
                     (limit
                       (save-excursion
                         (outline-next-heading)
                           (point)))
                     (msg (format
                            (concat
                              "org-cycle-hide-drawers:  "
                              "`:END:`"
                              " line missing at position %s")
                            (1+ start))))
                (if (re-search-forward "^[ \t]*:END:" limit t)
                  (outline-flag-region start (point-at-eol) t)
                  (user-error msg))))))))))
#+END_SRC

Make a wrapper for it:
#+BEGIN_SRC emacs-lisp
(defun hide-wrapper ()
  (interactive)
  (org-cycle-hide-drawers 'all))
(global-set-key (kbd "s-b") 'hide-wrapper)
#+END_SRC

** Notetaking
*** Org-Roam
First, let's use org-roam for associative notes.
#+BEGIN_SRC emacs-lisp
(use-package org-roam
      :ensure t
      :hook
      (after-init . org-roam-mode)
      :custom
      (org-roam-directory "~/Dropbox/notes/")
      :bind (:map org-roam-mode-map
              (("C-c n l" . org-roam)
               ("C-c n f" . org-roam-find-file)
               ("C-c n b" . org-roam-db-build-cache))
              :map org-mode-map
              (("C-c n i" . org-roam-insert))
              (("C-c n I" . org-roam-insert-immediate))))
#+END_SRC

org-roam-server provides a nice graph view.
#+BEGIN_SRC emacs-lisp
(use-package org-roam-server
  :ensure t
  :config
  (setq org-roam-server-host "127.0.0.1"
        org-roam-server-port 8080
        org-roam-server-authenticate nil
        org-roam-server-export-inline-images t
        org-roam-server-serve-files nil
        org-roam-server-served-file-extensions '("pdf" "mp4" "ogv")
        org-roam-server-network-poll t
        org-roam-server-network-arrows nil
        org-roam-server-network-label-truncate t
        org-roam-server-network-label-truncate-length 60
        org-roam-server-network-label-wrap-length 20))
(require 'org-roam-protocol)
#+END_SRC

Define deft directory for quick searches.
#+BEGIN_SRC emacs-lisp
(require 'deft)
(setq deft-directory "~/Dropbox/notes/")
#+END_SRC

Org roam capture template provides a simple template for new notes.
#+BEGIN_SRC emacs-lisp
(setq org-roam-capture-templates '(("d" "default" plain (function org-roam--capture-get-point)
     "%?"
     :file-name "%<%Y%m%d%H%M%S>-${slug}"
     :head "\n#+TITLE: ${title}\n#+ROAM_TAGS: unresearched\n#+SETUPFILE:~/Dropbox/setupfile.org\n"
     :unnarrowed t)))
#+END_SRC

*** HTML Export
#+BEGIN_SRC emacs-lisp
(setq org-html-head "<link rel=\"stylesheet\" href=\"https://sandyuraz.com/styles/org.min.css\">")
(setq org-publish-project-alist
      '(("github.io"
         :base-directory "~/Dropbox/publicnotes/"
         :base-extension "org"
         :publishing-directory "~/richardfeynmanrocks.github.io/notes/"
         :recursive t
         :publishing-function org-html-publish-to-html
         :headline-levels 4
         :html-extension "html"
         :html-head "<link rel=\"stylesheet\" href=\"https://sandyuraz.com/styles/org.min.css\">"
         )))
#+END_SRC

*** LaTeX Export
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c l") 'org-latex-export-to-pdf)
;;Eliminates the necessity for the save command before compilation is completed
(setq TeX-save-query nil)

(setq yas-triggers-in-field t)
;;Function that combines two commands 1. revert pdfoutput buffer 2. pdf-outline
(defun my-TeX-revert-document-buffer (file)
  (TeX-revert-document-buffer file)
  (pdf-outline))

;; Add custom function to the TeX compilation hook
(add-hook 'TeX-after-compilation-finished-functions #'my-TeX-revert-document-buffer)

(with-eval-after-load "ox-latex"
  (add-to-list 'org-latex-classes
               '("koma-article" "\\documentclass{lectures}"
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))))
(require 'ox-latex)
(setq org-latex-to-pdf-process
  '("xelatex -interaction nonstopmode %f"
     "xelatex -interaction nonstopmode %f")) ;; for multiple passes
(setenv "PATH" "/usr/local/texlive/2020/texmf-dist/tex/latex:$PATH" t)
#+END_SRC

** Misc
Load some external stuff first:

#+BEGIN_SRC emacs-lisp
(load "external/org-depend.el")
(load "external/org-checklist.el")
#+END_SRC

More config:

#+BEGIN_SRC emacs-lisp
(setq org-modules (append org-modules '(org-habit))) ;; Habit-tracking with Org Mode
(setq org-modules (append org-modules '(org-crypt))) ;; Encryption
(setq org-modules (append org-modules '(org-id))) ;; Unique headline identifiers

;; Define keywords
(setq org-todo-keywords '((sequence "TODO(t)" "WAIT(w)" "|" "DONE(d)" "NOPE(n)")))

;; Enable Org Babel features
(org-babel-do-load-languages ;; More languages!
 'org-babel-load-languages
 '((emacs-lisp . t)
   (python . t)
   (latex . t)
   (shell . t)
   (C . t)
   (makefile . t)
   (gnuplot . t)
   (haskell . t)))
(setq org-confirm-babel-evaluate nil) ;; Don't ask me if I want to execute my code or not
(setq org-src-tab-acts-natively t) ;; Indentation fix

;; Enable org link features
(org-link-set-parameters
 "run"
 :follow #'org-babel-ref-resolve) ;; Allow execution of Org Babel code from links
(add-to-list 'org-file-apps '(directory . emacs)) ;; Allow links to open directories in Dired
#+END_SRC
* Code
** Basics
Tab width should be 4.
#+BEGIN_SRC emacs-lisp
(setq-default tab-width 4)
(setq-default c-basic-offset 4)
#+END_SRC
** Features
*** vterm
#+BEGIN_SRC emacs-lisp
(use-package vterm
    :ensure t)
#+END_SRC

*** Flycheck
#+BEGIN_SRC emacs-lisp
(load "external/flycheck-google-cpplint")
(eval-after-load 'flycheck
  '(progn
     (require 'flycheck-google-cpplint)
     ;; Add Google C++ Style checker.
     ;; In default, syntax checked by Clang and Cppcheck.
     (flycheck-add-next-checker 'c/c++-cppcheck
                                '(warning . c/c++-googlelint))))
(add-hook 'c++-mode-hook (lambda () (setq flycheck-clang-language-standard "c++11")))
#+END_SRC

*** Company
Set up company-mode for completions and use yasnippet snippets as a backend.
#+BEGIN_SRC emacs-lisp
  (use-package company
      :ensure t
      :config
      (add-to-list 'company-backends 'company-tabnine)
      ;(push '(company-capf :with company-yasnippet) company-backends)
      (setq company-idle-delay 0)
      (setq company-minimum-prefix-length 1)
      ;; Add yasnippet support for all company backends
      ;; https://github.com/syl20bnr/spacemacs/pull/179
      ;(defvar company-mode/enable-yas t "Enable yasnippet for all backends.")

      ;; (defun company-mode/backend-with-yas (backend)
      ;;   (if (or (not company-mode/enable-yas) (and (listp backend)    (member 'company-yasnippet backend)))
      ;;       backend
      ;;     (append (if (consp backend) backend (list backend))
      ;;             '(:with company-yasnippet))))

      ;; (setq company-backends (mapcar #'company-mode/backend-with-yas company-backends))
      (global-company-mode))

#+END_SRC

#+RESULTS:
: t

*** TWEAKME lsp
lsp mode and UI addons - only C specific stuff right now.
#+BEGIN_SRC emacs-lisp
(use-package lsp-mode
    :init
    (setq lsp-enable-snippet nil)
    ;; (setq lsp-completion-enable-additional-text-edit nil)
    ;; (setq lsp-eldoc-enable-hover nil)
    (setq lsp-signature-auto-activate nil) ;; you could manually request them via `lsp-signature-activate`
    (setq lsp-signature-render-documentation nil)
    ;; (setq lsp-diagnostics-provider :none) stop it from yelling at you
    (setq lsp-modeline-code-actions-enable nil)
    (setq lsp-completion-show-detail nil)
    (setq lsp-enable-symbol-highlighting nil)
    (setq lsp-headerline-breadcrumb-enable nil)
    (setq lsp-ui-sideline-enable nil)
    (setq lsp-eldoc-enable-hover nil)
    (setq lsp-enable-semantic-highlighting nil)
    (setq read-process-output-max (* 1024 1024)) ;; 1mb
    (setq lsp-idle-delay 0.500)
    (setq gc-cons-threshold 100000000)
    (setq lsp-clients-clangd-executable "/usr/bin/clangd")
    (setq lsp-clients-clangd-args '("-function-arg-placeholders=0"))
    :config
    (lsp-register-client
     (make-lsp-client :new-connection (lsp-tramp-connection "jedi-language-server")
              :major-modes '(python-mode)
              :remote? t
              :server-id 'pyls-remote))
    :hook (;; replace XXX-mode with concrete major-mode(e. g. python-mode)
       (c++-mode . lsp)
       (c-mode . lsp)
       (html-mode . lsp)
       (css-mode . lsp)
       (python-mode . lsp)
       (rjsx-mode . lsp)
       (js-mode . lsp)
       (typescript-mode . lsp)
       ;; if you want which-key integration
       (lsp-mode . lsp-enable-which-key-integration))
    :commands lsp)

(use-package lsp-ui)
(setq lsp-enable-on-type-formatting nil)
(setq lsp-enable-indentation nil)
(use-package ccls
  :after projectile
  :custom
  (ccls-args nil)
  (ccls-executable (executable-find "ccls"))
  (projectile-project-root-files-top-down-recurring
   (append '("compile_commands.json" ".ccls")
           projectile-project-root-files-top-down-recurring))
  :config (push ".ccls-cache" projectile-globally-ignored-directories))
#+END_SRC

#+RESULTS:

*** Hook
#+BEGIN_SRC emacs-lisp
  (defun code-features-hook ()
    (lsp-mode)
    (company-mode))
  (add-hook 'c-mode-common-hook 'code-features-hook)

#+END_SRC

#+RESULTS:
| (lambda nil (c-set-offset 'innamespace 0) (setq prettify-symbols-alist (cons '(std:: . ) prettify-symbols-alist)) (setq prettify-symbols-alist (cons '(Eigen:: . ) prettify-symbols-alist))) | code-visuals-hook | code-features-hook |

** FIXME Aesthetics
*** Markdown
#+BEGIN_SRC emacs-lisp
(autoload 'markdown-mode "markdown-mode"
   "Major mode for editing Markdown files" t)
(add-to-list 'auto-mode-alist '("\\.markdown\\'" . markdown-mode))
(add-to-list 'auto-mode-alist '("\\.md\\'" . markdown-mode))

(autoload 'gfm-mode "markdown-mode"
   "Major mode for editing GitHub Flavored Markdown files" t)
(add-to-list 'auto-mode-alist '("README\\.md\\'" . gfm-mode))
#+END_SRC
*** lsp
#+BEGIN_SRC emacs-lisp
  (setq lsp-headerline-breadcrumb-enable nil)
  (with-eval-after-load 'lsp-ui
    (setq lsp-ui-doc-header nil)
    (setq lsp-ui-doc-position 'bottom)
    (setq lsp-ui-doc-delay 5)
    (setq lsp-ui-sideline-delay 1))
#+END_SRC

*** company
#+BEGIN_SRC emacs-lisp
  ;; (with-eval-after-load 'company
  ;;   (setq company-frontends '(company-preview-frontend)))
#+END_SRC
*** hl-todo
#+BEGIN_SRC emacs-lisp
(global-hl-todo-mode)
(setq hl-todo-keyword-faces
      '(("TODO"   . "#99bb66")
        ("FIXME"  . "#ff6655")
        ("DEBUG"  . "#a9a1e1")
        ("HACK"   . "#6c78dd")
        ("NOTE"   . "#44b9b1")))
(define-key hl-todo-mode-map (kbd "C-c p") 'hl-todo-previous)
(define-key hl-todo-mode-map (kbd "C-c n") 'hl-todo-next)
(define-key hl-todo-mode-map (kbd "C-c o") 'hl-todo-occur)
(define-key hl-todo-mode-map (kbd "C-c i") 'hl-todo-insert)
;; We already have todos in Org Mode!
(add-hook 'org-mode-hook (lambda () (hl-todo-mode -1)))
#+END_SRC
*** Hook
#+BEGIN_SRC emacs-lisp
  (defun code-visuals-hook ()
    ;; Makes code buffers look nicer
    (olivetti-mode 1)
    (olivetti-set-width 130)
    (focus-mode 1)
    (visual-line-mode 1)
    (lsp-ui-mode 1)
    (lsp-headerline-breadcrumb-mode 0))
  (add-hook 'c-mode-common-hook 'code-visuals-hook)
  (add-hook 'python-mode-hook 'code-visuals-hook)

  (add-hook 'c-mode-common-hook (lambda ()
                                  (c-set-offset 'innamespace 0)
                                  (push '("std::" . "") prettify-symbols-alist)
                                  (push '("Eigen::" . "" ) prettify-symbols-alist)
                                  ))
  (defun clean-whitespace-hook ()
    (whitespace-cleanup))
  (add-hook 'before-save-hook #'clean-whitespace-hook)

#+END_SRC

* Writing
** Distractionless
#+BEGIN_SRC emacs-lisp
(defun make-clean-frame ()
  (interactive)
  (setq default-minibuf0fer-frame
        (make-frame
         '((name . "minibuffer")
           (width . 0)
           (height . 0)
           (minibuffer . only)
           (top . 0)
           (left . 0)
           )))
  (setq new-frame
        (make-frame
         '((name . "editor")
           (width . 80)
         (height . 30)
         (minibuffer . nil)
         (top . 50)
         (left . 0)
         )))
  )

#+END_SRC
** Hooks
#+BEGIN_SRC emacs-lisp
(defun word-processing-hook ()
  ;; Makes code buffers look nicer
  (olivetti-mode 1)
  (olivetti-set-width 100)
  (visual-line-mode 1)
  (global-set-key (kbd "C-c s-a") 'flyspell-auto-correct-word))

(add-hook 'org-mode-hook 'word-processing-hook)

#+END_SRC
** Misc
#+BEGIN_SRC emacs-lisp
(setq ispell-program-name "aspell")
(define-key org-mode-map (kbd "C-c j") 'pandoc-jump-to-reference)
#+END_SRC
* Wacky
** exwm
#+BEGIN_SRC emacs-lisp
(require 'exwm)
(require 'exwm-config)
(exwm-config-example)
#+END_SRC
** many-cursors
   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
     (global-set-key (kbd "C->") 'mc/mark-next-like-this)
     (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
     (global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)
   #+END_SRC

* Server

#+BEGIN_SRC  emacs-lisp
(server-start)
#+END_SRC
